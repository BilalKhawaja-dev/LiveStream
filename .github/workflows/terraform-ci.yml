name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'eu-west-2'
  PROJECT_NAME: 'streaming-logs'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest
        
    - name: Setup TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        version: latest
        
    - name: Cache Terraform plugins
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-
          
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Validation
      run: |
        terraform init -backend=false
        terraform validate
        
    - name: Run TFLint
      run: |
        tflint --init
        tflint --format sarif > tflint-results.sarif
        
    - name: Upload TFLint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tflint-results.sarif
        
    - name: Run TFSec
      run: |
        tfsec . --format sarif --out tfsec-results.sarif
        
    - name: Upload TFSec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec-results.sarif

  plan:
    name: Plan Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: [dev, staging]
        
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cache Terraform plugins
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-
          
    - name: Terraform Init
      run: terraform init
      
    - name: Select Workspace
      run: |
        terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}
        
    - name: Copy Environment Variables
      run: |
        cp environments/${{ matrix.environment }}/terraform.tfvars terraform.tfvars
        
    - name: Terraform Plan
      run: |
        terraform plan -var-file=terraform.tfvars -out=${{ matrix.environment }}.tfplan
        
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: ${{ matrix.environment }}.tfplan
        retention-days: 5
        
    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');
          
          try {
            const planOutput = execSync('terraform show -no-color ${{ matrix.environment }}.tfplan', { encoding: 'utf8' });
            const comment = `## Terraform Plan - ${{ matrix.environment }}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`
            ${planOutput}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Error creating comment:', error);
          }

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-dev
        
    - name: Terraform Init
      run: terraform init
      
    - name: Select Workspace
      run: terraform workspace select dev
      
    - name: Terraform Apply
      run: terraform apply -auto-approve dev.tfplan
      
    - name: Post-deployment Tests
      run: |
        ./scripts/validate-terraform.sh test --environment dev

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Plan Artifact
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-staging
        
    - name: Terraform Init
      run: terraform init
      
    - name: Select Workspace
      run: terraform workspace select staging
      
    - name: Terraform Apply
      run: terraform apply -auto-approve staging.tfplan
      
    - name: Post-deployment Tests
      run: |
        ./scripts/validate-terraform.sh test --environment staging

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.environment == 'prod' && github.event.inputs.action == 'apply'
    
    environment: 
      name: prod
      url: https://console.aws.amazon.com/cloudwatch/home?region=eu-west-2#dashboards
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Select Workspace
      run: |
        terraform workspace select prod || terraform workspace new prod
        
    - name: Copy Environment Variables
      run: |
        cp environments/prod/terraform.tfvars terraform.tfvars
        
    - name: Terraform Plan
      run: |
        terraform plan -var-file=terraform.tfvars -out=prod.tfplan
        
    - name: Manual Approval Required
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.PROD_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Production Deployment Approval Required"
        issue-body: |
          Please review the production deployment plan and approve if ready to proceed.
          
          **Environment:** Production
          **Branch:** ${{ github.ref }}
          **Commit:** ${{ github.sha }}
          
          Review the plan output in the workflow logs before approving.
        exclude-workflow-initiator-as-approver: false
        
    - name: Terraform Apply
      run: terraform apply -auto-approve prod.tfplan
      
    - name: Post-deployment Tests
      run: |
        ./scripts/validate-terraform.sh test --environment prod
        
    - name: Notify Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Production deployment completed successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Production deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif
        
    - name: Run Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-results.sarif

  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
        
    - name: Generate Infracost JSON
      run: |
        infracost breakdown --path . --format json --out-file infracost-base.json
        
    - name: Post Infracost comment
      run: |
        infracost comment github --path infracost-base.json \
          --repo $GITHUB_REPOSITORY \
          --github-token ${{ github.token }} \
          --pull-request ${{ github.event.pull_request.number }} \
          --behavior update