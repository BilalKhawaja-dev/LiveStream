[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.dynamodb.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.dynamodb.data.aws_region.current: Read complete after 0s [id=eu-west-2][0m
[0m[1mmodule.waf[0].data.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mmodule.vpc.data.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=eu-west-2][0m
[0m[1mmodule.vpc.data.aws_region.current: Read complete after 0s [id=eu-west-2][0m
[0m[1mmodule.waf[0].data.aws_region.current: Read complete after 0s [id=eu-west-2][0m
[0m[1mmodule.storage.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.storage.data.aws_region.current: Read complete after 0s [id=eu-west-2][0m
[0m[1mmodule.waf[0].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.storage.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=981686514879][0m
[0m[1mmodule.storage.data.aws_caller_identity.current: Read complete after 0s [id=981686514879][0m
[0m[1mmodule.waf[0].data.aws_caller_identity.current: Read complete after 0s [id=981686514879][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.aurora.data.archive_file.lambda_db_init[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "archive_file" "lambda_db_init" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m output_base64sha256 = (known after apply)
      [32m+[0m[0m output_base64sha512 = (known after apply)
      [32m+[0m[0m output_md5          = (known after apply)
      [32m+[0m[0m output_path         = "modules/aurora/lambda/db_init.zip"
      [32m+[0m[0m output_sha          = (known after apply)
      [32m+[0m[0m output_sha256       = (known after apply)
      [32m+[0m[0m output_sha512       = (known after apply)
      [32m+[0m[0m output_size         = (known after apply)
      [32m+[0m[0m source_file         = "modules/aurora/lambda/db_init.py"
      [32m+[0m[0m type                = "zip"
    }

[1m  # module.aurora.data.aws_region.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_region" "current" {
      [32m+[0m[0m description = (known after apply)
      [32m+[0m[0m endpoint    = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
    }

[1m  # module.aurora.aws_cloudwatch_log_group.aurora_logs["error"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "aurora_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/rds/cluster/streaming-logs-dev-aurora-cluster/error"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-error-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-error-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_cloudwatch_log_group.aurora_logs["general"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "aurora_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/rds/cluster/streaming-logs-dev-aurora-cluster/general"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-general-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-general-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_cloudwatch_log_group.aurora_logs["slowquery"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "aurora_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/rds/cluster/streaming-logs-dev-aurora-cluster/slowquery"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-slowquery-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-slowquery-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_cloudwatch_log_group.lambda_db_init[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda_db_init" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/streaming-logs-dev-aurora-db-init"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-lambda-db-init-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-lambda-db-init-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_backup_failure[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_backup_failure" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This alarm triggers when Aurora backup fails or is missing"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-backup-failure"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "LessThanThreshold"
      [32m+[0m[0m datapoints_to_alarm                   = 1
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BackupRetentionPeriodStorageUsed"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-backup-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-backup-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 1
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_cpu_utilization[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_cpu_utilization" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Aurora instance CPU utilization"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-cpu-utilization-1"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "CPUUtilization"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-cpu-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-cpu-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 80
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_database_connections[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_database_connections" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Aurora cluster database connections"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-database-connections"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "DatabaseConnections"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-connections-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-connections-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 80
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_freeable_memory[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_freeable_memory" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Aurora instance freeable memory"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-freeable-memory-1"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "LessThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "FreeableMemory"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-memory-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-memory-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 134217728
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_read_latency[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_read_latency" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Aurora instance read latency"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-read-latency-1"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ReadLatency"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-read-latency-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-read-latency-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 0.2
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_serverless_acu_utilization[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_serverless_acu_utilization" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Aurora Serverless v2 ACU utilization"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-acu-utilization"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 3
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ServerlessDatabaseCapacity"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-acu-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-acu-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 1.6
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.aurora.aws_cloudwatch_metric_alarm.aurora_write_latency[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "aurora_write_latency" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors Aurora instance write latency"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-aurora-write-latency-1"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "WriteLatency"
      [32m+[0m[0m namespace                             = "AWS/RDS"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-write-latency-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-write-latency-alarm-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m threshold                             = 0.2
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.aurora.aws_db_subnet_group.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "aurora" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "streaming-logs-dev-aurora-subnet-group"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-subnet-group"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-subnet-group"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.aurora.aws_iam_policy.lambda_db_init_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_db_init_secrets" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "IAM policy for Lambda to access Aurora secrets"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-lambda-db-init-secrets-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-lambda-db-init-secrets-policy"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-lambda-db-init-secrets-policy"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_iam_role.lambda_db_init[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_db_init" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-lambda-db-init-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-lambda-db-init-role"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-lambda-db-init-role"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.aurora.aws_iam_role.rds_enhanced_monitoring[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "rds_enhanced_monitoring" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "monitoring.rds.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-rds-enhanced-monitoring-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-rds-enhanced-monitoring-role"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-rds-enhanced-monitoring-role"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.aurora.aws_iam_role_policy_attachment.lambda_db_init_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_db_init_secrets" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "streaming-logs-dev-lambda-db-init-role"
    }

[1m  # module.aurora.aws_iam_role_policy_attachment.lambda_db_init_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_db_init_vpc" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      [32m+[0m[0m role       = "streaming-logs-dev-lambda-db-init-role"
    }

[1m  # module.aurora.aws_iam_role_policy_attachment.rds_enhanced_monitoring[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "rds_enhanced_monitoring" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
      [32m+[0m[0m role       = "streaming-logs-dev-rds-enhanced-monitoring-role"
    }

[1m  # module.aurora.aws_kms_alias.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "aurora" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/streaming-logs-dev-aurora"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.aurora.aws_kms_key.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "aurora" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for Aurora cluster encryption"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-key"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-key"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_lambda_function.db_init[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "db_init" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/aurora/lambda/db_init.zip"
      [32m+[0m[0m function_name                  = "streaming-logs-dev-aurora-db-init"
      [32m+[0m[0m handler                        = "db_init.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-db-init"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-db-init"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m timeout                        = 300
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.aurora.aws_rds_cluster.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster" "aurora" {
      [32m+[0m[0m allocated_storage                     = (known after apply)
      [32m+[0m[0m apply_immediately                     = true
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m availability_zones                    = [
          [32m+[0m[0m "eu-west-2a",
          [32m+[0m[0m "eu-west-2b",
        ]
      [32m+[0m[0m backup_retention_period               = 7
      [32m+[0m[0m ca_certificate_identifier             = (known after apply)
      [32m+[0m[0m ca_certificate_valid_till             = (known after apply)
      [32m+[0m[0m cluster_identifier                    = "streaming-logs-dev-aurora-cluster"
      [32m+[0m[0m cluster_identifier_prefix             = (known after apply)
      [32m+[0m[0m cluster_members                       = (known after apply)
      [32m+[0m[0m cluster_resource_id                   = (known after apply)
      [32m+[0m[0m cluster_scalability_type              = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = true
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m database_name                         = "streaming_logs"
      [32m+[0m[0m db_cluster_parameter_group_name       = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = "streaming-logs-dev-aurora-subnet-group"
      [32m+[0m[0m db_system_id                          = (known after apply)
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m deletion_protection                   = false
      [32m+[0m[0m enable_global_write_forwarding        = false
      [32m+[0m[0m enable_http_endpoint                  = false
      [32m+[0m[0m enable_local_write_forwarding         = false
      [32m+[0m[0m enabled_cloudwatch_logs_exports       = [
          [32m+[0m[0m "error",
          [32m+[0m[0m "general",
          [32m+[0m[0m "slowquery",
        ]
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-mysql"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_mode                           = "provisioned"
      [32m+[0m[0m engine_version                        = "8.0.mysql_aurora.3.08.2"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m iam_roles                             = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m master_password                       = (sensitive value)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m master_username                       = "admin"
      [32m+[0m[0m monitoring_interval                   = 60
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_enabled          = true
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = 7
      [32m+[0m[0m port                                  = 3306
      [32m+[0m[0m preferred_backup_window               = "03:00-04:00"
      [32m+[0m[0m preferred_maintenance_window          = "sun:04:00-sun:05:00"
      [32m+[0m[0m reader_endpoint                       = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m storage_encrypted                     = true
      [32m+[0m[0m storage_type                          = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-cluster"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-cluster"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)

      [32m+[0m[0m serverlessv2_scaling_configuration {
          [32m+[0m[0m max_capacity             = 2
          [32m+[0m[0m min_capacity             = 0.5
          [32m+[0m[0m seconds_until_auto_pause = (known after apply)
        }
    }

[1m  # module.aurora.aws_rds_cluster_instance.aurora_instances[0][0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster_instance" "aurora_instances" {
      [32m+[0m[0m apply_immediately                     = true
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m cluster_identifier                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_parameter_group_name               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dbi_resource_id                       = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-mysql"
      [32m+[0m[0m engine_version                        = "8.0.mysql_aurora.3.08.2"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m force_destroy                         = false
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "streaming-logs-dev-aurora-instance-1"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.serverless"
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 60
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_enabled          = true
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = 7
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m preferred_backup_window               = (known after apply)
      [32m+[0m[0m preferred_maintenance_window          = (known after apply)
      [32m+[0m[0m promotion_tier                        = 0
      [32m+[0m[0m publicly_accessible                   = (known after apply)
      [32m+[0m[0m storage_encrypted                     = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-instance-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-instance-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m writer                                = (known after apply)
    }

[1m  # module.aurora.aws_secretsmanager_secret.aurora_master[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "aurora_master" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "Aurora master user password"
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m kms_key_id                     = (known after apply)
      [32m+[0m[0m name                           = "streaming-logs-dev-aurora-master-password"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 0
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-master-password"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-master-password"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
    }

[1m  # module.aurora.aws_secretsmanager_secret_version.aurora_master[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "aurora_master" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m has_secret_string_wo = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m secret_id            = (known after apply)
      [32m+[0m[0m secret_string        = (sensitive value)
      [32m+[0m[0m version_id           = (known after apply)
      [32m+[0m[0m version_stages       = (known after apply)
    }

[1m  # module.aurora.aws_sns_topic.aurora_alarms[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "aurora_alarms" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m display_name                = "Aurora Database Alarms"
      [32m+[0m[0m fifo_throughput_scope       = (known after apply)
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m kms_master_key_id           = (known after apply)
      [32m+[0m[0m name                        = "streaming-logs-dev-aurora-alarms"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-alarms"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-alarms"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.aurora.random_password.aurora_master[0m will be created
[0m  [32m+[0m[0m resource "random_password" "aurora_master" {
      [32m+[0m[0m bcrypt_hash = (sensitive value)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 16
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (sensitive value)
      [32m+[0m[0m special     = true
      [32m+[0m[0m upper       = true
    }

[1m  # module.auth.aws_cognito_identity_pool.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_identity_pool" "main" {
      [32m+[0m[0m allow_classic_flow               = false
      [32m+[0m[0m allow_unauthenticated_identities = false
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m identity_pool_name               = "streaming-logs-dev-identity"
      [32m+[0m[0m tags                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }

      [32m+[0m[0m cognito_identity_providers {
          [32m+[0m[0m client_id               = (known after apply)
          [32m+[0m[0m provider_name           = (known after apply)
          [32m+[0m[0m server_side_token_check = false
        }
    }

[1m  # module.auth.aws_cognito_identity_pool_roles_attachment.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_identity_pool_roles_attachment" "main" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m identity_pool_id = (known after apply)
      [32m+[0m[0m roles            = (known after apply)

      [32m+[0m[0m role_mapping {
          [32m+[0m[0m ambiguous_role_resolution = "AuthenticatedRole"
          [32m+[0m[0m identity_provider         = (known after apply)
          [32m+[0m[0m type                      = "Rules"

          [32m+[0m[0m mapping_rule {
              [32m+[0m[0m claim      = "custom:role"
              [32m+[0m[0m match_type = "Equals"
              [32m+[0m[0m role_arn   = (known after apply)
              [32m+[0m[0m value      = "admin"
            }
          [32m+[0m[0m mapping_rule {
              [32m+[0m[0m claim      = "custom:role"
              [32m+[0m[0m match_type = "Equals"
              [32m+[0m[0m role_arn   = (known after apply)
              [32m+[0m[0m value      = "creator"
            }
          [32m+[0m[0m mapping_rule {
              [32m+[0m[0m claim      = "custom:role"
              [32m+[0m[0m match_type = "Equals"
              [32m+[0m[0m role_arn   = (known after apply)
              [32m+[0m[0m value      = "viewer"
            }
        }
    }

[1m  # module.auth.aws_cognito_user_pool.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_user_pool" "main" {
      [32m+[0m[0m arn                        = (known after apply)
      [32m+[0m[0m auto_verified_attributes   = [
          [32m+[0m[0m "email",
        ]
      [32m+[0m[0m creation_date              = (known after apply)
      [32m+[0m[0m custom_domain              = (known after apply)
      [32m+[0m[0m deletion_protection        = "INACTIVE"
      [32m+[0m[0m domain                     = (known after apply)
      [32m+[0m[0m email_verification_message = (known after apply)
      [32m+[0m[0m email_verification_subject = (known after apply)
      [32m+[0m[0m endpoint                   = (known after apply)
      [32m+[0m[0m estimated_number_of_users  = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m last_modified_date         = (known after apply)
      [32m+[0m[0m mfa_configuration          = "OFF"
      [32m+[0m[0m name                       = "streaming-logs-dev-users"
      [32m+[0m[0m sms_verification_message   = (known after apply)
      [32m+[0m[0m tags                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m user_pool_tier             = (known after apply)
      [32m+[0m[0m username_attributes        = [
          [32m+[0m[0m "email",
        ]

      [32m+[0m[0m account_recovery_setting {
          [32m+[0m[0m recovery_mechanism {
              [32m+[0m[0m name     = "verified_email"
              [32m+[0m[0m priority = 1
            }
        }

      [32m+[0m[0m admin_create_user_config {
          [32m+[0m[0m allow_admin_create_user_only = false

          [32m+[0m[0m invite_message_template {
              [32m+[0m[0m email_message = "Welcome to the streaming platform! Your username is {username} and temporary password is {####}. Please sign in and change your password."
              [32m+[0m[0m email_subject = "Welcome to Streaming Platform"
              [32m+[0m[0m sms_message   = "Your username is {username} and temporary password is {####}"
            }
        }

      [32m+[0m[0m device_configuration {
          [32m+[0m[0m challenge_required_on_new_device      = true
          [32m+[0m[0m device_only_remembered_on_user_prompt = false
        }

      [32m+[0m[0m email_configuration {
          [32m+[0m[0m email_sending_account = "COGNITO_DEFAULT"
        }

      [32m+[0m[0m password_policy {
          [32m+[0m[0m minimum_length                   = 8
          [32m+[0m[0m require_lowercase                = true
          [32m+[0m[0m require_numbers                  = true
          [32m+[0m[0m require_symbols                  = true
          [32m+[0m[0m require_uppercase                = true
          [32m+[0m[0m temporary_password_validity_days = 7
        }

      [32m+[0m[0m schema {
          [32m+[0m[0m attribute_data_type = "String"
          [32m+[0m[0m mutable             = true
          [32m+[0m[0m name                = "email"
          [32m+[0m[0m required            = true
        }
      [32m+[0m[0m schema {
          [32m+[0m[0m attribute_data_type = "String"
          [32m+[0m[0m mutable             = true
          [32m+[0m[0m name                = "role"
          [32m+[0m[0m required            = false

          [32m+[0m[0m string_attribute_constraints {
              [32m+[0m[0m max_length = "20"
              [32m+[0m[0m min_length = "1"
            }
        }
      [32m+[0m[0m schema {
          [32m+[0m[0m attribute_data_type = "String"
          [32m+[0m[0m mutable             = true
          [32m+[0m[0m name                = "subscription_status"
          [32m+[0m[0m required            = false

          [32m+[0m[0m string_attribute_constraints {
              [32m+[0m[0m max_length = "20"
              [32m+[0m[0m min_length = "1"
            }
        }
      [32m+[0m[0m schema {
          [32m+[0m[0m attribute_data_type = "String"
          [32m+[0m[0m mutable             = true
          [32m+[0m[0m name                = "subscription_tier"
          [32m+[0m[0m required            = false

          [32m+[0m[0m string_attribute_constraints {
              [32m+[0m[0m max_length = "20"
              [32m+[0m[0m min_length = "1"
            }
        }

      [32m+[0m[0m user_pool_add_ons {
          [32m+[0m[0m advanced_security_mode = "AUDIT"
        }

      [32m+[0m[0m verification_message_template {
          [32m+[0m[0m default_email_option  = "CONFIRM_WITH_CODE"
          [32m+[0m[0m email_message         = "Your verification code is {####}"
          [32m+[0m[0m email_message_by_link = (known after apply)
          [32m+[0m[0m email_subject         = "Streaming Platform - Verify your email"
          [32m+[0m[0m email_subject_by_link = (known after apply)
          [32m+[0m[0m sms_message           = (known after apply)
        }
    }

[1m  # module.auth.aws_cognito_user_pool_client.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_user_pool_client" "main" {
      [32m+[0m[0m access_token_validity                         = 12
      [32m+[0m[0m allowed_oauth_flows                           = [
          [32m+[0m[0m "code",
          [32m+[0m[0m "implicit",
        ]
      [32m+[0m[0m allowed_oauth_flows_user_pool_client          = true
      [32m+[0m[0m allowed_oauth_scopes                          = [
          [32m+[0m[0m "email",
          [32m+[0m[0m "openid",
          [32m+[0m[0m "profile",
        ]
      [32m+[0m[0m auth_session_validity                         = (known after apply)
      [32m+[0m[0m callback_urls                                 = [
          [32m+[0m[0m "http://localhost:3000/callback",
        ]
      [32m+[0m[0m client_secret                                 = (sensitive value)
      [32m+[0m[0m default_redirect_uri                          = (known after apply)
      [32m+[0m[0m enable_propagate_additional_user_context_data = false
      [32m+[0m[0m enable_token_revocation                       = true
      [32m+[0m[0m explicit_auth_flows                           = [
          [32m+[0m[0m "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          [32m+[0m[0m "ALLOW_REFRESH_TOKEN_AUTH",
          [32m+[0m[0m "ALLOW_USER_PASSWORD_AUTH",
          [32m+[0m[0m "ALLOW_USER_SRP_AUTH",
        ]
      [32m+[0m[0m generate_secret                               = false
      [32m+[0m[0m id                                            = (known after apply)
      [32m+[0m[0m id_token_validity                             = 12
      [32m+[0m[0m logout_urls                                   = [
          [32m+[0m[0m "http://localhost:3000/logout",
        ]
      [32m+[0m[0m name                                          = "streaming-logs-dev-client"
      [32m+[0m[0m prevent_user_existence_errors                 = "ENABLED"
      [32m+[0m[0m read_attributes                               = [
          [32m+[0m[0m "custom:role",
          [32m+[0m[0m "custom:subscription_status",
          [32m+[0m[0m "custom:subscription_tier",
          [32m+[0m[0m "email",
          [32m+[0m[0m "email_verified",
        ]
      [32m+[0m[0m refresh_token_validity                        = 30
      [32m+[0m[0m supported_identity_providers                  = [
          [32m+[0m[0m "COGNITO",
        ]
      [32m+[0m[0m user_pool_id                                  = (known after apply)
      [32m+[0m[0m write_attributes                              = [
          [32m+[0m[0m "custom:role",
          [32m+[0m[0m "custom:subscription_status",
          [32m+[0m[0m "custom:subscription_tier",
          [32m+[0m[0m "email",
        ]

      [32m+[0m[0m token_validity_units {
          [32m+[0m[0m access_token  = "hours"
          [32m+[0m[0m id_token      = "hours"
          [32m+[0m[0m refresh_token = "days"
        }
    }

[1m  # module.auth.aws_cognito_user_pool_domain.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_user_pool_domain" "default" {
      [32m+[0m[0m aws_account_id                  = (known after apply)
      [32m+[0m[0m cloudfront_distribution         = (known after apply)
      [32m+[0m[0m cloudfront_distribution_arn     = (known after apply)
      [32m+[0m[0m cloudfront_distribution_zone_id = (known after apply)
      [32m+[0m[0m domain                          = "streaming-logs-dev-auth"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m managed_login_version           = (known after apply)
      [32m+[0m[0m s3_bucket                       = (known after apply)
      [32m+[0m[0m user_pool_id                    = (known after apply)
      [32m+[0m[0m version                         = (known after apply)
    }

[1m  # module.auth.aws_iam_role.admin[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "admin" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-cognito-admin"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.auth.aws_iam_role.authenticated[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "authenticated" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-cognito-authenticated"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.auth.aws_iam_role.creator[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "creator" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-cognito-creator"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.auth.aws_iam_role.unauthenticated[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "unauthenticated" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-cognito-unauthenticated"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.auth.aws_iam_role_policy.admin[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "admin" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-admin-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-sync:*",
                          [32m+[0m[0m "cognito-identity:*",
                          [32m+[0m[0m "execute-api:Invoke",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.auth.aws_iam_role_policy.authenticated[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "authenticated" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-authenticated-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-sync:*",
                          [32m+[0m[0m "cognito-identity:*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.auth.aws_iam_role_policy.creator[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "creator" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-creator-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-sync:*",
                          [32m+[0m[0m "cognito-identity:*",
                          [32m+[0m[0m "execute-api:Invoke",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.dynamodb.data.archive_file.backup_validator_zip[0][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "archive_file" "backup_validator_zip" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m output_base64sha256 = (known after apply)
      [32m+[0m[0m output_base64sha512 = (known after apply)
      [32m+[0m[0m output_md5          = (known after apply)
      [32m+[0m[0m output_path         = "modules/dynamodb/backup_validator.zip"
      [32m+[0m[0m output_sha          = (known after apply)
      [32m+[0m[0m output_sha256       = (known after apply)
      [32m+[0m[0m output_sha512       = (known after apply)
      [32m+[0m[0m output_size         = (known after apply)
      [32m+[0m[0m source_file         = "modules/dynamodb/backup_validator.py"
      [32m+[0m[0m type                = "zip"
    }

[1m  # module.dynamodb.aws_cloudwatch_event_rule.backup_validation_schedule[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "backup_validation_schedule" {
      [32m+[0m[0m arn                 = (known after apply)
      [32m+[0m[0m description         = "Trigger DynamoDB backup validation"
      [32m+[0m[0m event_bus_name      = "default"
      [32m+[0m[0m force_destroy       = false
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "streaming-logs-dev-dynamodb-backup-validation"
      [32m+[0m[0m name_prefix         = (known after apply)
      [32m+[0m[0m schedule_expression = "rate(6 hours)"
      [32m+[0m[0m tags                = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validation"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
      [32m+[0m[0m tags_all            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validation"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
    }

[1m  # module.dynamodb.aws_cloudwatch_event_target.backup_validation_target[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "backup_validation_target" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "streaming-logs-dev-dynamodb-backup-validation"
      [32m+[0m[0m target_id      = "DynamoDBBackupValidationTarget"
    }

[1m  # module.dynamodb.aws_cloudwatch_log_group.backup_validator_logs[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "backup_validator_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/streaming-logs-dev-dynamodb-backup-validator"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validator-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validator-logs"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_lag["audit_trail"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_lag" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB point-in-time recovery lag for audit_trail"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-audit_trail-backup-lag"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-audit-trail"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "PointInTimeRecoveryLag"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 300
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_lag["log_metadata"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_lag" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB point-in-time recovery lag for log_metadata"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-log_metadata-backup-lag"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-log-metadata"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "PointInTimeRecoveryLag"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 300
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_lag["system_config"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_lag" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB point-in-time recovery lag for system_config"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-system_config-backup-lag"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-system-config"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "PointInTimeRecoveryLag"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 300
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_lag["user_sessions"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_lag" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB point-in-time recovery lag for user_sessions"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-user_sessions-backup-lag"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-user-sessions"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "PointInTimeRecoveryLag"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-backup-lag-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 300
      [32m+[0m[0m treat_missing_data                    = "breaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_storage_usage["audit_trail"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_storage_usage" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB backup storage usage for audit_trail"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-audit_trail-backup-storage-usage"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-audit-trail"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BackupSizeBytes"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 10737418240
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_storage_usage["log_metadata"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_storage_usage" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB backup storage usage for log_metadata"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-log_metadata-backup-storage-usage"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-log-metadata"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BackupSizeBytes"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 10737418240
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_storage_usage["system_config"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_storage_usage" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB backup storage usage for system_config"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-system_config-backup-storage-usage"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-system-config"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BackupSizeBytes"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 10737418240
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.backup_storage_usage["user_sessions"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "backup_storage_usage" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB backup storage usage for user_sessions"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-user_sessions-backup-storage-usage"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-user-sessions"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BackupSizeBytes"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-backup-storage-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
          [32m+[0m[0m "Type"        = "backup-monitoring"
        }
      [32m+[0m[0m threshold                             = 10737418240
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.read_throttle["audit_trail"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "read_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB read throttle events for audit_trail"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-audit_trail-read-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-audit-trail"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ReadThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.read_throttle["log_metadata"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "read_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB read throttle events for log_metadata"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-log_metadata-read-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-log-metadata"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ReadThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.read_throttle["system_config"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "read_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB read throttle events for system_config"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-system_config-read-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-system-config"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ReadThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.read_throttle["user_sessions"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "read_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB read throttle events for user_sessions"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-user_sessions-read-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-user-sessions"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "ReadThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-read-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.system_errors["audit_trail"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "system_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB system errors for audit_trail"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-audit_trail-system-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-audit-trail"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "SystemErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m threshold                             = 0
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.system_errors["log_metadata"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "system_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB system errors for log_metadata"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-log_metadata-system-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-log-metadata"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "SystemErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m threshold                             = 0
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.system_errors["system_config"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "system_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB system errors for system_config"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-system_config-system-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-system-config"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "SystemErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m threshold                             = 0
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.system_errors["user_sessions"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "system_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB system errors for user_sessions"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-user_sessions-system-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-user-sessions"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "SystemErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-system-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m threshold                             = 0
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.user_errors["audit_trail"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "user_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB user errors for audit_trail"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-audit_trail-user-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-audit-trail"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 3
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "UserErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m threshold                             = 10
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.user_errors["log_metadata"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "user_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB user errors for log_metadata"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-log_metadata-user-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-log-metadata"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 3
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "UserErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m threshold                             = 10
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.user_errors["system_config"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "user_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB user errors for system_config"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-system_config-user-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-system-config"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 3
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "UserErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m threshold                             = 10
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.user_errors["user_sessions"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "user_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB user errors for user_sessions"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-user_sessions-user-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-user-sessions"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 3
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "UserErrors"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-user-errors-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m threshold                             = 10
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.write_throttle["audit_trail"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "write_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB write throttle events for audit_trail"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-audit_trail-write-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-audit-trail"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "WriteThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit_trail-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "audit_trail"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.write_throttle["log_metadata"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "write_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB write throttle events for log_metadata"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-log_metadata-write-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-log-metadata"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "WriteThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log_metadata-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "log_metadata"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.write_throttle["system_config"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "write_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB write throttle events for system_config"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-system_config-write-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-system-config"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "WriteThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system_config-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "system_config"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_cloudwatch_metric_alarm.write_throttle["user_sessions"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "write_throttle" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors DynamoDB write throttle events for user_sessions"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-user_sessions-write-throttle"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "TableName" = "streaming-logs-dev-user-sessions"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "WriteThrottledEvents"
      [32m+[0m[0m namespace                             = "AWS/DynamoDB"
      [32m+[0m[0m ok_actions                            = (known after apply)
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user_sessions-write-throttle-alarm"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Table"       = "user_sessions"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.dynamodb.aws_dynamodb_table.audit_trail[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "audit_trail" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "audit_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-audit-trail"
      [32m+[0m[0m range_key        = "timestamp"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_enabled   = false
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit-trail"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "audit-trail"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-audit-trail"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "audit-trail"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "action_type"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "audit_id"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "timestamp"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "user_id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "action_type"
          [32m+[0m[0m name               = "ActionTypeIndex"
          [32m+[0m[0m non_key_attributes = [
              [32m+[0m[0m "audit_id",
              [32m+[0m[0m "resource_id",
              [32m+[0m[0m "user_id",
            ]
          [32m+[0m[0m projection_type    = "INCLUDE"
          [32m+[0m[0m range_key          = "timestamp"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }
      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "user_id"
          [32m+[0m[0m name               = "UserAuditIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m range_key          = "timestamp"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }

      [32m+[0m[0m point_in_time_recovery {
          [32m+[0m[0m enabled                 = true
          [32m+[0m[0m recovery_period_in_days = (known after apply)
        }

      [32m+[0m[0m server_side_encryption {
          [32m+[0m[0m enabled     = true
          [32m+[0m[0m kms_key_arn = (known after apply)
        }

      [32m+[0m[0m ttl {
          [32m+[0m[0m attribute_name = "retention_date"
          [32m+[0m[0m enabled        = true
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.connections[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "connections" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "connection_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-connections"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "streaming-logs-dev-connections"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-connections"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "connection_id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m ttl {
          [32m+[0m[0m attribute_name = "expires_at"
          [32m+[0m[0m enabled        = true
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.log_metadata[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "log_metadata" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "log_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-log-metadata"
      [32m+[0m[0m range_key        = "timestamp"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_enabled   = false
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log-metadata"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "log-metadata"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-log-metadata"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "log-metadata"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "log_id"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "log_level"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "service_name"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "timestamp"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "user_id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "log_level"
          [32m+[0m[0m name               = "LogLevelIndex"
          [32m+[0m[0m non_key_attributes = [
              [32m+[0m[0m "log_id",
              [32m+[0m[0m "message",
              [32m+[0m[0m "service_name",
            ]
          [32m+[0m[0m projection_type    = "INCLUDE"
          [32m+[0m[0m range_key          = "timestamp"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }
      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "service_name"
          [32m+[0m[0m name               = "ServiceIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m range_key          = "timestamp"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }
      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "user_id"
          [32m+[0m[0m name               = "UserIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "KEYS_ONLY"
          [32m+[0m[0m range_key          = "timestamp"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }

      [32m+[0m[0m point_in_time_recovery {
          [32m+[0m[0m enabled                 = true
          [32m+[0m[0m recovery_period_in_days = (known after apply)
        }

      [32m+[0m[0m server_side_encryption {
          [32m+[0m[0m enabled     = true
          [32m+[0m[0m kms_key_arn = (known after apply)
        }

      [32m+[0m[0m ttl {
          [32m+[0m[0m attribute_name = "ttl"
          [32m+[0m[0m enabled        = true
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.messages[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "messages" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "stream_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-messages"
      [32m+[0m[0m range_key        = "timestamp"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "streaming-logs-dev-messages"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-messages"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "stream_id"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "timestamp"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m ttl {
          [32m+[0m[0m attribute_name = "expires_at"
          [32m+[0m[0m enabled        = true
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.streams[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "streams" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "stream_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-streams"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "streaming-logs-dev-streams"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-streams"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "status"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "stream_id"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "user_id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "status"
          [32m+[0m[0m name               = "StatusIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }
      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "user_id"
          [32m+[0m[0m name               = "UserIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.system_config[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "system_config" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "config_key"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-system-config"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_enabled   = false
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system-config"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "system-config"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-system-config"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "system-config"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "config_key"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "environment"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "environment"
          [32m+[0m[0m name               = "EnvironmentIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }

      [32m+[0m[0m point_in_time_recovery {
          [32m+[0m[0m enabled                 = true
          [32m+[0m[0m recovery_period_in_days = (known after apply)
        }

      [32m+[0m[0m server_side_encryption {
          [32m+[0m[0m enabled     = true
          [32m+[0m[0m kms_key_arn = (known after apply)
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.user_sessions[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "user_sessions" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "session_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-user-sessions"
      [32m+[0m[0m range_key        = "user_id"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_enabled   = false
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user-sessions"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "user-sessions"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-user-sessions"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "user-sessions"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "created_at"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "session_id"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "user_id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "user_id"
          [32m+[0m[0m name               = "UserSessionIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m range_key          = "created_at"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }

      [32m+[0m[0m point_in_time_recovery {
          [32m+[0m[0m enabled                 = true
          [32m+[0m[0m recovery_period_in_days = (known after apply)
        }

      [32m+[0m[0m server_side_encryption {
          [32m+[0m[0m enabled     = true
          [32m+[0m[0m kms_key_arn = (known after apply)
        }

      [32m+[0m[0m ttl {
          [32m+[0m[0m attribute_name = "expires_at"
          [32m+[0m[0m enabled        = true
        }
    }

[1m  # module.dynamodb.aws_dynamodb_table.users[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "users" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "user_id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "streaming-logs-dev-users"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "streaming-logs-dev-users"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-users"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "email"
          [32m+[0m[0m type = "S"
        }
      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "user_id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m global_secondary_index {
          [32m+[0m[0m hash_key           = "email"
          [32m+[0m[0m name               = "EmailIndex"
          [32m+[0m[0m non_key_attributes = []
          [32m+[0m[0m projection_type    = "ALL"
          [32m+[0m[0m read_capacity      = (known after apply)
          [32m+[0m[0m write_capacity     = (known after apply)
        }
    }

[1m  # module.dynamodb.aws_iam_role.backup_validator_role[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "backup_validator_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-dynamodb-backup-validator-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validator-role"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validator-role"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.dynamodb.aws_iam_role_policy.backup_validator_policy[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "backup_validator_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-dynamodb-backup-validator-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.dynamodb.aws_kms_alias.dynamodb[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "dynamodb" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/streaming-logs-dev-dynamodb"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.dynamodb.aws_kms_key.dynamodb[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "dynamodb" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for DynamoDB table encryption"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-key"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-key"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
    }

[1m  # module.dynamodb.aws_lambda_function.backup_validator[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "backup_validator" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/dynamodb/backup_validator.zip"
      [32m+[0m[0m function_name                  = "streaming-logs-dev-dynamodb-backup-validator"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validator"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-backup-validator"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
          [32m+[0m[0m "Type"        = "backup-validation"
        }
      [32m+[0m[0m timeout                        = 300
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # module.dynamodb.aws_lambda_permission.allow_cloudwatch_backup_validation[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_cloudwatch_backup_validation" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "streaming-logs-dev-dynamodb-backup-validator"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "events.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromCloudWatch"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # module.dynamodb.aws_sns_topic.dynamodb_alarms[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "dynamodb_alarms" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m display_name                = "DynamoDB Table Alarms"
      [32m+[0m[0m fifo_throughput_scope       = (known after apply)
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m kms_master_key_id           = (known after apply)
      [32m+[0m[0m name                        = "streaming-logs-dev-dynamodb-alarms"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-alarms"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-alarms"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.dynamodb.local_file.backup_validator_source[0][0m will be created
[0m  [32m+[0m[0m resource "local_file" "backup_validator_source" {
      [32m+[0m[0m content              = <<-EOT
            import json
            import boto3
            import os
            from datetime import datetime, timedelta
            import logging
            
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            dynamodb = boto3.client('dynamodb')
            cloudwatch = boto3.client('cloudwatch')
            sns = boto3.client('sns')
            
            def handler(event, context):
                """
                Validate DynamoDB backup status and send alerts if issues are found
                """
                table_names = json.loads(os.environ['TABLE_NAMES'])
                sns_topic_arn = os.environ['SNS_TOPIC_ARN']
                environment = os.environ['ENVIRONMENT']
                project_name = os.environ['PROJECT_NAME']
                
                backup_issues = []
                
                for table_name in table_names:
                    try:
                        # Check point-in-time recovery status
                        response = dynamodb.describe_continuous_backups(TableName=table_name)
                        pitr_status = response['ContinuousBackupsDescription']['PointInTimeRecoveryDescription']['PointInTimeRecoveryStatus']
                        
                        if pitr_status != 'ENABLED':
                            backup_issues.append(f"Point-in-time recovery is {pitr_status} for table {table_name}")
                            continue
                        
                        # Check backup lag
                        earliest_restorable_time = response['ContinuousBackupsDescription']['PointInTimeRecoveryDescription']['EarliestRestorableDateTime']
                        latest_restorable_time = response['ContinuousBackupsDescription']['PointInTimeRecoveryDescription']['LatestRestorableDateTime']
                        
                        current_time = datetime.now(latest_restorable_time.tzinfo)
                        backup_lag = (current_time - latest_restorable_time).total_seconds()
                        
                        # Send custom metric for backup lag
                        cloudwatch.put_metric_data(
                            Namespace='DynamoDB/BackupMonitoring',
                            MetricData=[
                                {
                                    'MetricName': 'BackupLagSeconds',
                                    'Dimensions': [
                                        {
                                            'Name': 'TableName',
                                            'Value': table_name
                                        },
                                        {
                                            'Name': 'Environment',
                                            'Value': environment
                                        }
                                    ],
                                    'Value': backup_lag,
                                    'Unit': 'Seconds',
                                    'Timestamp': current_time
                                }
                            ]
                        )
                        
                        # Alert if backup lag is too high (more than 5 minutes)
                        if backup_lag > 300:
                            backup_issues.append(f"High backup lag ({backup_lag:.0f} seconds) for table {table_name}")
                        
                        # Check retention period
                        retention_hours = (current_time - earliest_restorable_time).total_seconds() / 3600
                        expected_retention_hours = 7 * 24  # 7 days for development
                        
                        if retention_hours < expected_retention_hours * 0.9:  # Allow 10% variance
                            backup_issues.append(f"Backup retention period is shorter than expected for table {table_name}: {retention_hours:.1f} hours")
                        
                        logger.info(f"Backup validation successful for table {table_name}")
                        
                    except Exception as e:
                        backup_issues.append(f"Error validating backups for table {table_name}: {str(e)}")
                        logger.error(f"Error validating backups for table {table_name}: {str(e)}")
                
                # Send alert if there are any issues
                if backup_issues:
                    message = f"DynamoDB Backup Issues Detected in {environment} environment:\\n\\n"
                    message += "\\n".join(f"- {issue}" for issue in backup_issues)
                    
                    sns.publish(
                        TopicArn=sns_topic_arn,
                        Subject=f"DynamoDB Backup Issues - {project_name} {environment}",
                        Message=message
                    )
                    
                    logger.warning(f"Backup issues found: {backup_issues}")
                    return {
                        'statusCode': 200,
                        'body': json.dumps({
                            'status': 'issues_found',
                            'issues': backup_issues
                        })
                    }
                
                logger.info("All backup validations passed")
                return {
                    'statusCode': 200,
                    'body': json.dumps({
                        'status': 'success',
                        'message': 'All backup validations passed'
                    })
                }
        EOT
      [32m+[0m[0m content_base64sha256 = (known after apply)
      [32m+[0m[0m content_base64sha512 = (known after apply)
      [32m+[0m[0m content_md5          = (known after apply)
      [32m+[0m[0m content_sha1         = (known after apply)
      [32m+[0m[0m content_sha256       = (known after apply)
      [32m+[0m[0m content_sha512       = (known after apply)
      [32m+[0m[0m directory_permission = "0777"
      [32m+[0m[0m file_permission      = "0777"
      [32m+[0m[0m filename             = "modules/dynamodb/backup_validator.py"
      [32m+[0m[0m id                   = (known after apply)
    }

[1m  # module.media_services[0].data.archive_file.media_processor[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "archive_file" "media_processor" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m output_base64sha256 = (known after apply)
      [32m+[0m[0m output_base64sha512 = (known after apply)
      [32m+[0m[0m output_md5          = (known after apply)
      [32m+[0m[0m output_path         = "modules/media_services/functions/media_processor.zip"
      [32m+[0m[0m output_sha          = (known after apply)
      [32m+[0m[0m output_sha256       = (known after apply)
      [32m+[0m[0m output_sha512       = (known after apply)
      [32m+[0m[0m output_size         = (known after apply)
      [32m+[0m[0m source_file         = "modules/media_services/functions/media_processor.py"
      [32m+[0m[0m type                = "zip"
    }

[1m  # module.media_services[0].data.archive_file.presigned_url_generator[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "archive_file" "presigned_url_generator" {
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m output_base64sha256 = (known after apply)
      [32m+[0m[0m output_base64sha512 = (known after apply)
      [32m+[0m[0m output_md5          = (known after apply)
      [32m+[0m[0m output_path         = "modules/media_services/functions/presigned_url_generator.zip"
      [32m+[0m[0m output_sha          = (known after apply)
      [32m+[0m[0m output_sha256       = (known after apply)
      [32m+[0m[0m output_sha512       = (known after apply)
      [32m+[0m[0m output_size         = (known after apply)
      [32m+[0m[0m source_file         = "modules/media_services/functions/presigned_url_generator.py"
      [32m+[0m[0m type                = "zip"
    }

[1m  # module.media_services[0].data.aws_caller_identity.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_caller_identity" "current" {
      [32m+[0m[0m account_id = (known after apply)
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m user_id    = (known after apply)
    }

[1m  # module.media_services[0].data.aws_region.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_region" "current" {
      [32m+[0m[0m description = (known after apply)
      [32m+[0m[0m endpoint    = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
    }

[1m  # module.media_services[0].aws_cloudfront_distribution.media_distribution[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_distribution" "media_distribution" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m caller_reference                = (known after apply)
      [32m+[0m[0m comment                         = "Media distribution for streaming-logs"
      [32m+[0m[0m continuous_deployment_policy_id = (known after apply)
      [32m+[0m[0m default_root_object             = "index.html"
      [32m+[0m[0m domain_name                     = (known after apply)
      [32m+[0m[0m enabled                         = true
      [32m+[0m[0m etag                            = (known after apply)
      [32m+[0m[0m hosted_zone_id                  = (known after apply)
      [32m+[0m[0m http_version                    = "http2"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m in_progress_validation_batches  = (known after apply)
      [32m+[0m[0m is_ipv6_enabled                 = true
      [32m+[0m[0m last_modified_time              = (known after apply)
      [32m+[0m[0m price_class                     = "PriceClass_100"
      [32m+[0m[0m retain_on_delete                = false
      [32m+[0m[0m staging                         = false
      [32m+[0m[0m status                          = (known after apply)
      [32m+[0m[0m tags                            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m trusted_key_groups              = (known after apply)
      [32m+[0m[0m trusted_signers                 = (known after apply)
      [32m+[0m[0m wait_for_deployment             = true

      [32m+[0m[0m default_cache_behavior {
          [32m+[0m[0m allowed_methods            = [
              [32m+[0m[0m "DELETE",
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
              [32m+[0m[0m "OPTIONS",
              [32m+[0m[0m "PATCH",
              [32m+[0m[0m "POST",
              [32m+[0m[0m "PUT",
            ]
          [32m+[0m[0m cached_methods             = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress                   = true
          [32m+[0m[0m default_ttl                = 86400
          [32m+[0m[0m max_ttl                    = 31536000
          [32m+[0m[0m min_ttl                    = 0
          [32m+[0m[0m response_headers_policy_id = (known after apply)
          [32m+[0m[0m target_origin_id           = (known after apply)
          [32m+[0m[0m trusted_key_groups         = (known after apply)
          [32m+[0m[0m trusted_signers            = (known after apply)
          [32m+[0m[0m viewer_protocol_policy     = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = [
                  [32m+[0m[0m "Access-Control-Request-Headers",
                  [32m+[0m[0m "Access-Control-Request-Method",
                  [32m+[0m[0m "Origin",
                ]
              [32m+[0m[0m query_string            = true
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward           = "none"
                  [32m+[0m[0m whitelisted_names = (known after apply)
                }
            }
        }

      [32m+[0m[0m ordered_cache_behavior {
          [32m+[0m[0m allowed_methods        = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
              [32m+[0m[0m "OPTIONS",
            ]
          [32m+[0m[0m cached_methods         = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress               = true
          [32m+[0m[0m default_ttl            = 604800
          [32m+[0m[0m max_ttl                = 31536000
          [32m+[0m[0m min_ttl                = 86400
          [32m+[0m[0m path_pattern           = "/processed/*"
          [32m+[0m[0m target_origin_id       = (known after apply)
          [32m+[0m[0m viewer_protocol_policy = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = (known after apply)
              [32m+[0m[0m query_string            = false
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward = "none"
                }
            }
        }
      [32m+[0m[0m ordered_cache_behavior {
          [32m+[0m[0m allowed_methods        = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
              [32m+[0m[0m "OPTIONS",
            ]
          [32m+[0m[0m cached_methods         = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress               = false
          [32m+[0m[0m default_ttl            = 10
          [32m+[0m[0m max_ttl                = 60
          [32m+[0m[0m min_ttl                = 0
          [32m+[0m[0m path_pattern           = "*.m3u8"
          [32m+[0m[0m target_origin_id       = (known after apply)
          [32m+[0m[0m viewer_protocol_policy = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = (known after apply)
              [32m+[0m[0m query_string            = true
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward = "none"
                }
            }
        }
      [32m+[0m[0m ordered_cache_behavior {
          [32m+[0m[0m allowed_methods        = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m cached_methods         = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress               = false
          [32m+[0m[0m default_ttl            = 604800
          [32m+[0m[0m max_ttl                = 31536000
          [32m+[0m[0m min_ttl                = 86400
          [32m+[0m[0m path_pattern           = "*.ts"
          [32m+[0m[0m target_origin_id       = (known after apply)
          [32m+[0m[0m viewer_protocol_policy = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = (known after apply)
              [32m+[0m[0m query_string            = false
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward = "none"
                }
            }
        }

      [32m+[0m[0m origin {
          [32m+[0m[0m connection_attempts      = 3
          [32m+[0m[0m connection_timeout       = 10
          [32m+[0m[0m domain_name              = (known after apply)
          [32m+[0m[0m origin_access_control_id = (known after apply)
          [32m+[0m[0m origin_id                = (known after apply)

          [32m+[0m[0m custom_header {
              [32m+[0m[0m name  = "X-Forwarded-Host"
              [32m+[0m[0m value = "media.streaming-logs.com"
            }
        }
      [32m+[0m[0m origin {
          [32m+[0m[0m connection_attempts      = 3
          [32m+[0m[0m connection_timeout       = 10
          [32m+[0m[0m domain_name              = (known after apply)
          [32m+[0m[0m origin_access_control_id = (known after apply)
          [32m+[0m[0m origin_id                = (known after apply)
        }

      [32m+[0m[0m restrictions {
          [32m+[0m[0m geo_restriction {
              [32m+[0m[0m locations        = (known after apply)
              [32m+[0m[0m restriction_type = "none"
            }
        }

      [32m+[0m[0m viewer_certificate {
          [32m+[0m[0m cloudfront_default_certificate = true
          [32m+[0m[0m minimum_protocol_version       = "TLSv1.2_2021"
        }
    }

[1m  # module.media_services[0].aws_cloudfront_origin_access_control.media_oac[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_origin_access_control" "media_oac" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m description                       = "OAC for media content distribution"
      [32m+[0m[0m etag                              = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m name                              = "streaming-logs-dev-media-oac"
      [32m+[0m[0m origin_access_control_origin_type = "s3"
      [32m+[0m[0m signing_behavior                  = "always"
      [32m+[0m[0m signing_protocol                  = "sigv4"
    }

[1m  # module.media_services[0].aws_cloudfront_response_headers_policy.media_headers[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_response_headers_policy" "media_headers" {
      [32m+[0m[0m arn     = (known after apply)
      [32m+[0m[0m comment = "Security and CORS headers for media content"
      [32m+[0m[0m etag    = (known after apply)
      [32m+[0m[0m id      = (known after apply)
      [32m+[0m[0m name    = "streaming-logs-dev-media-headers"

      [32m+[0m[0m cors_config {
          [32m+[0m[0m access_control_allow_credentials = false
          [32m+[0m[0m access_control_max_age_sec       = 86400
          [32m+[0m[0m origin_override                  = false

          [32m+[0m[0m access_control_allow_headers {
              [32m+[0m[0m items = [
                  [32m+[0m[0m "*",
                ]
            }

          [32m+[0m[0m access_control_allow_methods {
              [32m+[0m[0m items = [
                  [32m+[0m[0m "DELETE",
                  [32m+[0m[0m "GET",
                  [32m+[0m[0m "HEAD",
                  [32m+[0m[0m "OPTIONS",
                  [32m+[0m[0m "PATCH",
                  [32m+[0m[0m "POST",
                  [32m+[0m[0m "PUT",
                ]
            }

          [32m+[0m[0m access_control_allow_origins {
              [32m+[0m[0m items = [
                  [32m+[0m[0m "*",
                ]
            }

          [32m+[0m[0m access_control_expose_headers {
              [32m+[0m[0m items = [
                  [32m+[0m[0m "Content-Length",
                  [32m+[0m[0m "Content-Type",
                  [32m+[0m[0m "ETag",
                ]
            }
        }

      [32m+[0m[0m security_headers_config {
          [32m+[0m[0m content_type_options {
              [32m+[0m[0m override = true
            }
          [32m+[0m[0m frame_options {
              [32m+[0m[0m frame_option = "DENY"
              [32m+[0m[0m override     = true
            }
          [32m+[0m[0m referrer_policy {
              [32m+[0m[0m override        = true
              [32m+[0m[0m referrer_policy = "strict-origin-when-cross-origin"
            }
          [32m+[0m[0m strict_transport_security {
              [32m+[0m[0m access_control_max_age_sec = 31536000
              [32m+[0m[0m include_subdomains         = true
              [32m+[0m[0m override                   = true
              [32m+[0m[0m preload                    = true
            }
        }
    }

[1m  # module.media_services[0].aws_cloudwatch_log_group.media_processing[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "media_processing" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/media/streaming-logs-dev"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
    }

[1m  # module.media_services[0].aws_cloudwatch_log_group.media_processor[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "media_processor" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/streaming-logs-dev-media-processor"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
    }

[1m  # module.media_services[0].aws_cloudwatch_log_group.presigned_url_generator[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "presigned_url_generator" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/streaming-logs-dev-presigned-url-generator"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
    }

[1m  # module.media_services[0].aws_cloudwatch_metric_alarm.cloudfront_4xx_errors[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "cloudfront_4xx_errors" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "This metric monitors CloudFront 4xx error rate"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-cloudfront-4xx-errors"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "4xxErrorRate"
      [32m+[0m[0m namespace                             = "AWS/CloudFront"
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m threshold                             = 5
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.media_services[0].aws_cloudwatch_metric_alarm.s3_bucket_size[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "s3_bucket_size" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "This metric monitors S3 bucket size"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-s3-bucket-size"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = (known after apply)
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BucketSizeBytes"
      [32m+[0m[0m namespace                             = "AWS/S3"
      [32m+[0m[0m period                                = 86400
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m threshold                             = 107374182400
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.media_services[0].aws_iam_role.media_processor[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "media_processor" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-media-processor-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.media_services[0].aws_iam_role.presigned_url_generator[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "presigned_url_generator" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "streaming-logs-dev-presigned-url-generator-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.media_services[0].aws_iam_role_policy.media_processor_cloudfront[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "media_processor_cloudfront" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-media-processor-cloudfront-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.media_services[0].aws_iam_role_policy.media_processor_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "media_processor_s3" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-media-processor-s3-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.media_services[0].aws_iam_role_policy.presigned_url_generator_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "presigned_url_generator_s3" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "streaming-logs-dev-presigned-url-generator-s3-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.media_services[0].aws_iam_role_policy_attachment.media_processor_basic[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "media_processor_basic" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      [32m+[0m[0m role       = "streaming-logs-dev-media-processor-role"
    }

[1m  # module.media_services[0].aws_iam_role_policy_attachment.presigned_url_generator_basic[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "presigned_url_generator_basic" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      [32m+[0m[0m role       = "streaming-logs-dev-presigned-url-generator-role"
    }

[1m  # module.media_services[0].aws_lambda_function.media_processor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "media_processor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/media_services/functions/media_processor.zip"
      [32m+[0m[0m function_name                  = "streaming-logs-dev-media-processor"
      [32m+[0m[0m handler                        = "media_processor.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 1024
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m timeout                        = 300
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # module.media_services[0].aws_lambda_function.presigned_url_generator[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "presigned_url_generator" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/media_services/functions/presigned_url_generator.zip"
      [32m+[0m[0m function_name                  = "streaming-logs-dev-presigned-url-generator"
      [32m+[0m[0m handler                        = "presigned_url_generator.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # module.media_services[0].aws_lambda_permission.media_processor_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "media_processor_s3" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "streaming-logs-dev-media-processor"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "s3.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromS3Bucket"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # module.media_services[0].aws_s3_bucket.media_content[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "media_content" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-media-content"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "MediaStorage"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-media-content"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "MediaStorage"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.media_services[0].aws_s3_bucket.processed_media[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "processed_media" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-processed-media"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "ProcessedMedia"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-processed-media"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "ProcessedMedia"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.media_services[0].aws_s3_bucket_lifecycle_configuration.media_content[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "media_content" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "media_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m abort_incomplete_multipart_upload {
              [32m+[0m[0m days_after_initiation = 7
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 30
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "STANDARD_IA"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 365
              [32m+[0m[0m storage_class = "DEEP_ARCHIVE"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 90
              [32m+[0m[0m storage_class = "GLACIER"
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "temp_uploads_cleanup"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 1
              [32m+[0m[0m expired_object_delete_marker = false
            }

          [32m+[0m[0m filter {
              [32m+[0m[0m prefix = "temp/"
            }
        }
    }

[1m  # module.media_services[0].aws_s3_bucket_notification.media_content_notification[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "media_content_notification" {
      [32m+[0m[0m bucket      = (known after apply)
      [32m+[0m[0m eventbridge = false
      [32m+[0m[0m id          = (known after apply)

      [32m+[0m[0m lambda_function {
          [32m+[0m[0m events              = [
              [32m+[0m[0m "s3:ObjectCreated:*",
            ]
          [32m+[0m[0m filter_prefix       = "uploads/"
          [32m+[0m[0m id                  = (known after apply)
          [32m+[0m[0m lambda_function_arn = (known after apply)
        }
    }

[1m  # module.media_services[0].aws_s3_bucket_policy.media_content_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "media_content_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.media_services[0].aws_s3_bucket_policy.processed_media_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "processed_media_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.media_services[0].aws_s3_bucket_public_access_block.media_content[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "media_content" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.media_services[0].aws_s3_bucket_public_access_block.processed_media[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "processed_media" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.media_services[0].aws_s3_bucket_server_side_encryption_configuration.media_content[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "media_content" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.media_services[0].aws_s3_bucket_server_side_encryption_configuration.processed_media[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "processed_media" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.media_services[0].aws_s3_bucket_versioning.media_content[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "media_content" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Suspended"
        }
    }

[1m  # module.media_services[0].aws_s3_bucket_versioning.processed_media[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "processed_media" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Suspended"
        }
    }

[1m  # module.media_services[0].random_id.bucket_suffix[0m will be created
[0m  [32m+[0m[0m resource "random_id" "bucket_suffix" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 4
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1m  # module.storage.aws_kms_alias.s3_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "s3_encryption" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/streaming-logs-dev-s3-encryption"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.storage.aws_kms_key.s3_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "s3_encryption" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for S3 bucket encryption - streaming-logs-dev"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-s3-encryption"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-s3-encryption"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
    }

[1m  # module.storage.aws_s3_bucket.athena_results[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "athena_results" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "streaming-logs-query-results-dev-981686514879"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "DataType"    = "QueryResults"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-query-results-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Athena query results and temporary data"
          [32m+[0m[0m "Retention"   = "30-days"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "DataType"    = "QueryResults"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-query-results-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Athena query results and temporary data"
          [32m+[0m[0m "Retention"   = "30-days"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.storage.aws_s3_bucket.backups[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "backups" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "streaming-logs-backups-dev-981686514879"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "DataType"    = "Backups"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-backups-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Database and application backups"
          [32m+[0m[0m "Retention"   = "1-year"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "DataType"    = "Backups"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-backups-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Database and application backups"
          [32m+[0m[0m "Retention"   = "1-year"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.storage.aws_s3_bucket.error_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "error_logs" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "streaming-logs-errors-dev-981686514879"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "DataType"    = "ErrorLogs"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-errors-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Failed log processing and error storage"
          [32m+[0m[0m "Retention"   = "1-year"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "DataType"    = "ErrorLogs"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-errors-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Failed log processing and error storage"
          [32m+[0m[0m "Retention"   = "1-year"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.storage.aws_s3_bucket.streaming_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "streaming_logs" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "streaming-logs-logs-dev-981686514879"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "DataType"    = "Logs"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-logs-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Streaming application logs storage"
          [32m+[0m[0m "Retention"   = "1-year"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "DataType"    = "Logs"
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-logs-dev"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Purpose"     = "Streaming application logs storage"
          [32m+[0m[0m "Retention"   = "1-year"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.storage.aws_s3_bucket_intelligent_tiering_configuration.backups[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_intelligent_tiering_configuration" "backups" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "backups_intelligent_tiering"
      [32m+[0m[0m status = "Enabled"

      [32m+[0m[0m filter {}

      [32m+[0m[0m tiering {
          [32m+[0m[0m access_tier = "ARCHIVE_ACCESS"
          [32m+[0m[0m days        = 90
        }
      [32m+[0m[0m tiering {
          [32m+[0m[0m access_tier = "DEEP_ARCHIVE_ACCESS"
          [32m+[0m[0m days        = 180
        }
    }

[1m  # module.storage.aws_s3_bucket_intelligent_tiering_configuration.streaming_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_intelligent_tiering_configuration" "streaming_logs" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "streaming_logs_intelligent_tiering"
      [32m+[0m[0m status = "Enabled"

      [32m+[0m[0m filter {}

      [32m+[0m[0m tiering {
          [32m+[0m[0m access_tier = "ARCHIVE_ACCESS"
          [32m+[0m[0m days        = 90
        }
      [32m+[0m[0m tiering {
          [32m+[0m[0m access_tier = "DEEP_ARCHIVE_ACCESS"
          [32m+[0m[0m days        = 180
        }
    }

[1m  # module.storage.aws_s3_bucket_lifecycle_configuration.athena_results[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "athena_results" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "athena_results_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m abort_incomplete_multipart_upload {
              [32m+[0m[0m days_after_initiation = 1
            }

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 30
              [32m+[0m[0m expired_object_delete_marker = false
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 7
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_lifecycle_configuration.backups[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "backups" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "backups_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m abort_incomplete_multipart_upload {
              [32m+[0m[0m days_after_initiation = 7
            }

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 365
              [32m+[0m[0m expired_object_delete_marker = false
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 30
              [32m+[0m[0m storage_class   = "STANDARD_IA"
            }
          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 60
              [32m+[0m[0m storage_class   = "GLACIER"
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "STANDARD_IA"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 60
              [32m+[0m[0m storage_class = "GLACIER"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_lifecycle_configuration.error_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "error_logs" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "error_logs_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m abort_incomplete_multipart_upload {
              [32m+[0m[0m days_after_initiation = 7
            }

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 365
              [32m+[0m[0m expired_object_delete_marker = false
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 30
              [32m+[0m[0m storage_class   = "STANDARD_IA"
            }
          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 60
              [32m+[0m[0m storage_class   = "GLACIER"
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "STANDARD_IA"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 60
              [32m+[0m[0m storage_class = "GLACIER"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_lifecycle_configuration.streaming_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "streaming_logs" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "streaming_logs_lifecycle"
          [32m+[0m[0m status = "Enabled"

          [32m+[0m[0m abort_incomplete_multipart_upload {
              [32m+[0m[0m days_after_initiation = 7
            }

          [32m+[0m[0m expiration {
              [32m+[0m[0m days                         = 365
              [32m+[0m[0m expired_object_delete_marker = false
            }

          [32m+[0m[0m filter {
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 30
              [32m+[0m[0m storage_class   = "STANDARD_IA"
            }
          [32m+[0m[0m noncurrent_version_transition {
              [32m+[0m[0m noncurrent_days = 60
              [32m+[0m[0m storage_class   = "GLACIER"
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "STANDARD_IA"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 60
              [32m+[0m[0m storage_class = "GLACIER"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_public_access_block.athena_results[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "athena_results" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.storage.aws_s3_bucket_public_access_block.backups[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "backups" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.storage.aws_s3_bucket_public_access_block.error_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "error_logs" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.storage.aws_s3_bucket_public_access_block.streaming_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "streaming_logs" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.storage.aws_s3_bucket_server_side_encryption_configuration.athena_results[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "athena_results" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_server_side_encryption_configuration.backups[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "backups" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_server_side_encryption_configuration.error_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "error_logs" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_server_side_encryption_configuration.streaming_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "streaming_logs" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.storage.aws_s3_bucket_versioning.athena_results[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "athena_results" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.storage.aws_s3_bucket_versioning.backups[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "backups" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.storage.aws_s3_bucket_versioning.error_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "error_logs" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.storage.aws_s3_bucket_versioning.streaming_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "streaming_logs" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.vpc.aws_db_subnet_group.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "aurora" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "streaming-logs-dev-aurora-subnet-group"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-subnet-group"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-subnet-group"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.main[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "main" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-igw"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-igw"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_route_table.database[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "database" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-database-rt"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "database"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-database-rt"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "database"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-private-rt"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "private"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-private-rt"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "private"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-public-rt"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "public"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-public-rt"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "public"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.database[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "database" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.database[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "database" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_security_group.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "aurora" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for Aurora database"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "All outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "MySQL/Aurora access from VPC"
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "streaming-logs-dev-aurora-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-sg"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-aurora-sg"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "aurora"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_security_group.ecs[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecs" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for ECS tasks"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "All outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "HTTP access from VPC"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "HTTPS access from VPC"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "streaming-logs-dev-ecs-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-ecs-sg"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "ecs"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-ecs-sg"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "ecs"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_security_group.vpc_endpoints[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "vpc_endpoints" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for VPC endpoints"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "All outbound traffic"
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/16",
                ]
              [32m+[0m[0m description      = "HTTPS access from VPC"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "streaming-logs-dev-vpc-endpoints-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-vpc-endpoints-sg"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "vpc-endpoints"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-vpc-endpoints-sg"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "vpc-endpoints"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_subnet.database[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "database" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.20.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-database-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "database"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-database-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "database"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.database[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "database" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.21.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-database-2"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "database"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-database-2"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "database"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.10.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-private-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "private"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-private-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "private"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.11.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-private-2"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "private"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-private-2"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "private"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-public-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "public"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-public-1"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "public"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-west-2b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-public-2"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "public"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-public-2"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Type"        = "public"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-vpc"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-vpc"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
    }

[1m  # module.vpc.aws_vpc_endpoint.dynamodb[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "dynamodb" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-2.dynamodb"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-dynamodb-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "dynamodb"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Gateway"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc.aws_vpc_endpoint.ecr_api[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ecr_api" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-2.ecr.api"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-ecr-api-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "ecr"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-ecr-api-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "ecr"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc.aws_vpc_endpoint.ecr_dkr[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "ecr_dkr" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-2.ecr.dkr"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-ecr-dkr-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "ecr"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-ecr-dkr-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "ecr"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc.aws_vpc_endpoint.logs[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "logs" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = true
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-2.logs"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-logs-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "logs"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-logs-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "logs"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Interface"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.vpc.aws_vpc_endpoint.s3[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc_endpoint" "s3" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m cidr_blocks           = (known after apply)
      [32m+[0m[0m dns_entry             = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m ip_address_type       = (known after apply)
      [32m+[0m[0m network_interface_ids = (known after apply)
      [32m+[0m[0m owner_id              = (known after apply)
      [32m+[0m[0m policy                = (known after apply)
      [32m+[0m[0m prefix_list_id        = (known after apply)
      [32m+[0m[0m private_dns_enabled   = (known after apply)
      [32m+[0m[0m requester_managed     = (known after apply)
      [32m+[0m[0m route_table_ids       = (known after apply)
      [32m+[0m[0m security_group_ids    = (known after apply)
      [32m+[0m[0m service_name          = "com.amazonaws.eu-west-2.s3"
      [32m+[0m[0m service_region        = (known after apply)
      [32m+[0m[0m state                 = (known after apply)
      [32m+[0m[0m subnet_ids            = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-s3-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "s3"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "streaming-logs-dev-s3-endpoint"
          [32m+[0m[0m "Project"     = "streaming-logs"
          [32m+[0m[0m "Service"     = "s3"
        }
      [32m+[0m[0m vpc_endpoint_type     = "Gateway"
      [32m+[0m[0m vpc_id                = (known after apply)
    }

[1m  # module.waf[0].aws_cloudwatch_log_group.waf_logs[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "waf_logs" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/wafv2/streaming-logs-dev"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
    }

[1m  # module.waf[0].aws_cloudwatch_metric_alarm.waf_blocked_requests[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "waf_blocked_requests" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "This metric monitors WAF blocked requests"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-waf-blocked-requests"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "Region" = "eu-west-2"
          [32m+[0m[0m "WebACL" = "streaming-logs-dev-web-acl"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "BlockedRequests"
      [32m+[0m[0m namespace                             = "AWS/WAFV2"
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m threshold                             = 100
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.waf[0].aws_cloudwatch_metric_alarm.waf_rate_limit_triggered[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "waf_rate_limit_triggered" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "This metric monitors WAF rate limiting"
      [32m+[0m[0m alarm_name                            = "streaming-logs-dev-waf-rate-limit"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "Region" = "eu-west-2"
          [32m+[0m[0m "WebACL" = "streaming-logs-dev-web-acl"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "streaming-logs-dev-RateLimit"
      [32m+[0m[0m namespace                             = "AWS/WAFV2"
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Sum"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m threshold                             = 50
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # module.waf[0].aws_wafv2_web_acl.main[0m will be created
[0m  [32m+[0m[0m resource "aws_wafv2_web_acl" "main" {
      [32m+[0m[0m application_integration_url = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m capacity                    = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m lock_token                  = (known after apply)
      [32m+[0m[0m name                        = "streaming-logs-dev-web-acl"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m scope                       = "REGIONAL"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "streaming-logs"
        }

      [32m+[0m[0m default_action {
          [32m+[0m[0m allow {
            }
        }

      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "RateLimitRule"
          [32m+[0m[0m priority = 3

          [32m+[0m[0m action {
              [32m+[0m[0m block {
                }
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m rate_based_statement {
                  [32m+[0m[0m aggregate_key_type    = "IP"
                  [32m+[0m[0m evaluation_window_sec = 300
                  [32m+[0m[0m limit                 = 2000

                  [32m+[0m[0m scope_down_statement {
                      [32m+[0m[0m not_statement {
                          [32m+[0m[0m statement {
                              [32m+[0m[0m byte_match_statement {
                                  [32m+[0m[0m positional_constraint = "STARTS_WITH"
                                  [32m+[0m[0m search_string         = "/health"

                                  [32m+[0m[0m field_to_match {
                                      [32m+[0m[0m uri_path {}
                                    }

                                  [32m+[0m[0m text_transformation {
                                      [32m+[0m[0m priority = 0
                                      [32m+[0m[0m type     = "LOWERCASE"
                                    }
                                }
                            }
                        }
                    }
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "streaming-logs-dev-RateLimit"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "SQLInjectionRule"
          [32m+[0m[0m priority = 6

          [32m+[0m[0m action {
              [32m+[0m[0m block {
                }
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m sqli_match_statement {
                  [32m+[0m[0m field_to_match {
                      [32m+[0m[0m all_query_arguments {}
                    }
                  [32m+[0m[0m text_transformation {
                      [32m+[0m[0m priority = 0
                      [32m+[0m[0m type     = "URL_DECODE"
                    }
                  [32m+[0m[0m text_transformation {
                      [32m+[0m[0m priority = 1
                      [32m+[0m[0m type     = "HTML_ENTITY_DECODE"
                    }
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "streaming-logs-dev-SQLInjection"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "SizeRestrictionsRule"
          [32m+[0m[0m priority = 8

          [32m+[0m[0m action {
              [32m+[0m[0m block {
                }
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m or_statement {
                  [32m+[0m[0m statement {
                      [32m+[0m[0m size_constraint_statement {
                          [32m+[0m[0m comparison_operator = "GT"
                          [32m+[0m[0m size                = 8192

                          [32m+[0m[0m field_to_match {
                              [32m+[0m[0m body {
                                  [32m+[0m[0m oversize_handling = "CONTINUE"
                                }
                            }

                          [32m+[0m[0m text_transformation {
                              [32m+[0m[0m priority = 0
                              [32m+[0m[0m type     = "NONE"
                            }
                        }
                    }
                  [32m+[0m[0m statement {
                      [32m+[0m[0m size_constraint_statement {
                          [32m+[0m[0m comparison_operator = "GT"
                          [32m+[0m[0m size                = 8192

                          [32m+[0m[0m field_to_match {
                              [32m+[0m[0m single_header {
                                  [32m+[0m[0m name = "content-length"
                                }
                            }

                          [32m+[0m[0m text_transformation {
                              [32m+[0m[0m priority = 0
                              [32m+[0m[0m type     = "NONE"
                            }
                        }
                    }
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "streaming-logs-dev-SizeRestrictions"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "XSSRule"
          [32m+[0m[0m priority = 7

          [32m+[0m[0m action {
              [32m+[0m[0m block {
                }
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m xss_match_statement {
                  [32m+[0m[0m field_to_match {
                      [32m+[0m[0m all_query_arguments {}
                    }
                  [32m+[0m[0m text_transformation {
                      [32m+[0m[0m priority = 0
                      [32m+[0m[0m type     = "URL_DECODE"
                    }
                  [32m+[0m[0m text_transformation {
                      [32m+[0m[0m priority = 1
                      [32m+[0m[0m type     = "HTML_ENTITY_DECODE"
                    }
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "streaming-logs-dev-XSS"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "AWSManagedRulesCommonRuleSet"
          [32m+[0m[0m priority = 1

          [32m+[0m[0m override_action {
              [32m+[0m[0m none {}
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m managed_rule_group_statement {
                  [32m+[0m[0m name        = "AWSManagedRulesCommonRuleSet"
                  [32m+[0m[0m vendor_name = "AWS"
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "streaming-logs-dev-CommonRuleSet"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "AWSManagedRulesKnownBadInputsRuleSet"
          [32m+[0m[0m priority = 2

          [32m+[0m[0m override_action {
              [32m+[0m[0m none {}
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m managed_rule_group_statement {
                  [32m+[0m[0m name        = "AWSManagedRulesKnownBadInputsRuleSet"
                  [32m+[0m[0m vendor_name = "AWS"
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "streaming-logs-dev-KnownBadInputs"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }

      [32m+[0m[0m visibility_config {
          [32m+[0m[0m cloudwatch_metrics_enabled = true
          [32m+[0m[0m metric_name                = "streaming-logs-dev-WebACL"
          [32m+[0m[0m sampled_requests_enabled   = true
        }
    }

[1mPlan:[0m 167 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aurora_cluster_endpoint     = (sensitive value)
  [32m+[0m[0m aurora_cluster_id           = (known after apply)
  [32m+[0m[0m cloudfront_domain_name      = (known after apply)
  [32m+[0m[0m cognito_user_pool_client_id = (known after apply)
  [32m+[0m[0m cognito_user_pool_id        = (known after apply)
  [32m+[0m[0m deployment_info             = {
      [32m+[0m[0m environment      = "dev"
      [32m+[0m[0m features_enabled = {
          [32m+[0m[0m ecs_containers   = false
          [32m+[0m[0m media_services   = true
          [32m+[0m[0m ssl_certificates = false
          [32m+[0m[0m waf_protection   = true
        }
      [32m+[0m[0m next_steps       = [
          [32m+[0m[0m "1. Configure terraform.tfvars with your settings",
          [32m+[0m[0m "2. Run terraform plan to review changes",
          [32m+[0m[0m "3. Run terraform apply to deploy infrastructure",
          [32m+[0m[0m "4. Build and deploy container images if using ECS",
          [32m+[0m[0m "5. Configure DNS if using custom domain",
        ]
      [32m+[0m[0m project_name     = "streaming-logs"
      [32m+[0m[0m region           = "eu-west-2"
    }
  [32m+[0m[0m kms_key_arn                 = (known after apply)
  [32m+[0m[0m media_bucket_name           = (known after apply)
  [32m+[0m[0m private_subnet_ids          = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m public_subnet_ids           = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m vpc_cidr                    = "10.0.0.0/16"
  [32m+[0m[0m vpc_id                      = (known after apply)
  [32m+[0m[0m waf_web_acl_arn             = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
